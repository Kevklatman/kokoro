#!/usr/bin/env python
"""
Debug script for TTS generation
"""
import sys
import torch
import numpy as np
from typing import Tuple, List
from fastapi import HTTPException
from loguru import logger

# Import required functions
from entry.config import get_settings
from entry.core.models import get_pipelines, get_models, get_voices, forward_gpu
from entry.core.tts import generate_audio, preprocess_text, apply_emotion_effects

def debug_tts(text: str, voice: str = 'af_sky', fiction: bool = False) -> None:
    """Debug TTS generation with detailed logging"""
    try:
        logger.info(f"Input text: '{text}'")
        logger.info(f"Selected voice: {voice}")
        
        settings = get_settings()
        pipelines = get_pipelines()
        models = get_models()
        voices = get_voices()
        
        logger.info(f"Available voices: {list(voices)}")
        if voice not in voices:
            logger.error(f"Voice '{voice}' not found in available voices")
            return
        
        preprocessed_text = preprocess_text(text)
        logger.info(f"Preprocessed text: '{preprocessed_text}'")
        
        use_gpu = torch.cuda.is_available() and settings.cuda_available
        logger.info(f"Using GPU: {use_gpu}")
        
        logger.info("Initializing pipeline...")
        pipeline = pipelines[voice[0]]
        pack = pipeline.load_voice(voice)
        
        logger.info("Processing text through pipeline...")
        chunks = list(pipeline(preprocessed_text, voice, 1.0))
        logger.info(f"Pipeline returned {len(chunks)} chunks")
        
        if not chunks:
            logger.error("No chunks were generated by the pipeline!")
            return
        
        # Try to process the first chunk
        _, ps, _ = chunks[0]
        logger.info(f"First chunk phonemes: {ps}")
        
        ref_s = pack[len(ps)-1]
        logger.info("Generating audio...")
        
        try:
            if use_gpu and 'forward_gpu' in globals():
                audio = forward_gpu(ps, ref_s, 1.0)
            else:
                logger.info("Using CPU model")
                audio = models[False](ps, ref_s, 1.0)
            
            audio = apply_emotion_effects(audio, 0, 0, 0, 0)
            logger.info("Successfully generated audio for the first chunk!")
            logger.info(f"Audio shape: {audio.shape}")
        except Exception as e:
            logger.exception("Audio generation failed")
            logger.error(f"Error: {str(e)}")
    
    except Exception as e:
        logger.exception("Debug process failed")
        logger.error(f"Error: {str(e)}")

if __name__ == "__main__":
    # Test with a simple string
    test_text = "This is a test of the TTS system."
    voice = "af_sky" if len(sys.argv) < 2 else sys.argv[1]
    
    logger.info("=== Starting TTS Debug ===")
    debug_tts(test_text, voice)
    logger.info("=== Debug Complete ===")
