name: Deploy to Cloud Run

on:
  push:
    branches:
      - main  # or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      AR_HOSTNAME: ${{ secrets.AR_HOSTNAME }}
      AR_REPOSITORY: ${{ secrets.AR_REPOSITORY }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          
      - name: Authenticate Docker
        run: |
          gcloud auth configure-docker ${{ env.AR_HOSTNAME }}
          
      - name: Setup model files cache
        id: cache-models
        uses: actions/cache@v3
        with:
          path: ./models
          key: ${{ runner.os }}-kokoro-models-${{ hashFiles('**/requirements.txt') }}
      
      - name: Download models if not cached
        if: steps.cache-models.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Create directories
          mkdir -p ./models
          mkdir -p ./models/voices
          mkdir -p ./models/Kokoro-82M
          
          # Install dependencies
          pip install huggingface_hub
          
          # Download config and model files
          echo "Downloading main model files..."
          python -c "import os, sys, shutil; from huggingface_hub import hf_hub_download; \
            token = os.environ.get('HF_TOKEN', ''); \
            print('Using token:', '*' * len(token) if token else 'None'); \
            \
            # Download config to both locations for compatibility \
            config_file = hf_hub_download(repo_id='hexgrad/Kokoro-82M', filename='config.json', token=token, local_dir='./models/Kokoro-82M'); \
            print('Downloaded config to:', config_file); \
            shutil.copy(config_file, './models/config.json'); \
            print('Copied to root models dir'); \
            \
            # Download model file \
            print('Downloading model file...'); \
            model_file = hf_hub_download(repo_id='hexgrad/Kokoro-82M', filename='kokoro-v1_0.pth', token=token, local_dir='./models/Kokoro-82M'); \
            print('Downloaded model to:', model_file); \
            \
            # Create directories for voice files \
            voices_dir = './models/voices'; \
            os.makedirs(voices_dir, exist_ok=True); \
            \
            # Download voice files \
            for voice_file in ['lisa.pt', 'michael.pt', 'random.pt']: \
                print(f'Downloading voice file {voice_file}'); \
                voice_path = hf_hub_download(repo_id='hexgrad/Kokoro-82M', filename=f'voices/{voice_file}', token=token, local_dir='./models'); \
                print(f'Downloaded {voice_file} to {voice_path}'); \
            \
            # Ensure files are in correct structure \
            print('Setting up final directory structure'); \
            print('Done preparing model files'); \
            sys.exit(0)"
          
          # Check if files were downloaded correctly
          echo "Verifying model files..."
          ls -la ./models
          ls -la ./models/Kokoro-82M
          ls -la ./models/voices
      
      - name: Build and push Docker image
        run: |
          echo "Building with models from cache"
          ls -la ./models/Kokoro-82M
          docker build -t ${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push ${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          
      - name: Deploy to Cloud Run
        run: |
          # Deploy with proper environment configuration for offline mode
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --cpu=2 \
            --memory=4Gi \
            --timeout=300s \
            --no-cpu-throttling \
            --startup-cpu-boost \
            --port=8080 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars=OFFLINE_MODE=true,PYTHONPATH=/app \
            --health-check-path=/health \
            --readiness-check-path=/ready \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated
