name: Deploy to Cloud Run

on:
  push:
    branches:
      - main  # or your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      AR_HOSTNAME: ${{ secrets.AR_HOSTNAME }}
      AR_REPOSITORY: ${{ secrets.AR_REPOSITORY }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          
      - name: Authenticate Docker
        run: |
          gcloud auth configure-docker ${{ env.AR_HOSTNAME }}
          
      - name: Setup model files cache
        id: cache-models
        uses: actions/cache@v3
        with:
          path: ./models
          key: ${{ runner.os }}-kokoro-models-${{ hashFiles('**/requirements.txt') }}
      
      - name: Download models if not cached
        if: steps.cache-models.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Create directories
          mkdir -p ./models
          mkdir -p ./models/voices
          mkdir -p ./models/Kokoro-82M
          
          # Install dependencies
          pip install huggingface_hub
          
          # Download model files from Hugging Face
          python -c "
          import os
          import sys
          import shutil
          from huggingface_hub import hf_hub_download
          
          # Get token from environment - proper way to access env vars in Python
          token = os.environ.get('HF_TOKEN')
          if not token:
              print('WARNING: HF_TOKEN environment variable not set')
              # Fail early if token is required but not available
              # sys.exit(1)  # Uncomment to make this a hard failure
          else:
              print('Using HF token (masked for security)')
          
          # Ensure directories exist
          models_dir = os.path.join(os.getcwd(), 'models')
          kokoro_dir = os.path.join(models_dir, 'Kokoro-82M')
          voices_dir = os.path.join(models_dir, 'voices')
          os.makedirs(models_dir, exist_ok=True)
          os.makedirs(kokoro_dir, exist_ok=True)
          os.makedirs(voices_dir, exist_ok=True)
          
          # Download model file
          try:
              print('\nDownloading main model file...')
              model_file = hf_hub_download(
                  repo_id='hexgrad/Kokoro-82M',
                  filename='model.pt',
                  local_dir=models_dir,
                  token=token
              )
              print(f'Successfully downloaded model to: {model_file}')
              print(f'File size: {os.path.getsize(model_file)} bytes')
          except Exception as e:
              print(f'Error downloading model file: {e}')
              sys.exit(1)
          
          # Download config file
          try:
              print('\nDownloading config file...')
              config_file = hf_hub_download(
                  repo_id='hexgrad/Kokoro-82M',
                  filename='config.json',
                  local_dir=kokoro_dir,
                  token=token
              )
              print(f'Downloaded config to: {config_file}')
              shutil.copy(config_file, os.path.join(models_dir, 'config.json'))
              print(f'Copied config to root models dir: {os.path.join(models_dir, "config.json")}')
          except Exception as e:
              print(f'Error downloading config file: {e}')
          
          # Download voice files
          try:
              print('\nDownloading voice files...')
              voices = [
                  'default.npz',
                  'alta.npz',
                  'athena.npz', 
                  'ceres.npz',
                  'luna.npz'
              ]
              
              for voice in voices:
                  voice_file = hf_hub_download(
                      repo_id='hexgrad/Kokoro-82M-voices',
                      filename=voice,
                      local_dir=voices_dir,
                      token=token
                  )
                  print(f'Downloaded {voice}')
              
              print('All voices downloaded successfully')
          except Exception as e:
              print(f'Error downloading voices: {e}')
          
          # Verify downloaded files
          print('\nVerifying downloaded files:')
          file_count = 0
          for root, dirs, files in os.walk(models_dir):
              for file in files:
                  filepath = os.path.join(root, file)
                  print(f'- {filepath} ({os.path.getsize(filepath)} bytes)')
                  file_count += 1
          
          print(f'\nTotal files downloaded: {file_count}')
          "
          
          # Check if files were downloaded correctly
          echo "\nVerifying model files in filesystem..."
          ls -la ./models
          ls -la ./models/Kokoro-82M
          ls -la ./models/voices
      
      - name: Build and push Docker image
        run: |
          echo "Building with models from cache"
          ls -la ./models/Kokoro-82M
          docker build -t ${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push ${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          
      - name: Deploy to Cloud Run
        run: |
          # Deploy with proper environment configuration for offline mode
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.AR_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.AR_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --cpu=2 \
            --memory=4Gi \
            --timeout=300s \
            --no-cpu-throttling \
            --startup-cpu-boost \
            --port=8080 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars=OFFLINE_MODE=true,PYTHONPATH=/app \
            --health-check-path=/health \
            --readiness-check-path=/ready \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated
